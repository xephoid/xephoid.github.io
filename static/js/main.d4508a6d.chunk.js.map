{"version":3,"sources":["logo.svg","services/ZekeApi.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ZekeApi","apiPath","success","error","complete","axios","get","this","headers","Access-Control-Allow-Origin","then","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","api","state","info","name","description","pages","title","rendered","content","posts","self","getInfo","console","log","setState","data","getPages","resp","getPosts","html","__html","_this2","react_default","a","createElement","className","lib","right","href","src","alt","id","m","s","dangerouslySetInnerHTML","renderWordpressHTML","map","post","key","style","textAlign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4508a6d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\r\n\r\nclass ZekeApi {\r\n   apiPath = \"https://s3-us-west-1.amazonaws.com/zekeswepson/\";\r\n\r\n   getInfo(success, error, complete) {\r\n      axios.get(this.apiPath + 'general.json', {\r\n         headers: {'Access-Control-Allow-Origin': '*'}\r\n     }).then(success);\r\n   }\r\n\r\n   getPages(success) {\r\n      axios.get(this.apiPath + \"pages.json\", {\r\n         headers: {'Access-Control-Allow-Origin': '*'}\r\n     }).then(success);\r\n   }\r\n\r\n   getPosts(success) {\r\n      axios.get(this.apiPath + \"posts.json\", {\r\n         headers: {'Access-Control-Allow-Origin': '*'}\r\n     }).then(success);\r\n   }\r\n\r\n}\r\n\r\nexport default ZekeApi;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Button, Navbar, NavItem, Row, Col, Card, Icon } from 'react-materialize';\nimport ZekeApi from './services/ZekeApi';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.api = new ZekeApi();\n    this.state = {\n       info: { name: \"\", description: \"\" },\n       pages: [{title: {rendered: \"\"}, content: {rendered: \"\"}}],\n       posts: []\n    };\n  }\n\n  \n  componentWillMount() {\n    var self = this;\n    \n    this.api.getInfo(function(info) {\n      console.log(\"site info\", info);\n      self.setState({info: info.data});\n    });\n\n    this.api.getPages(function(resp) {\n      console.log(\"pages\", resp);\n      self.setState({ pages: resp.data});\n    });\n\n    this.api.getPosts(function(resp) {\n      console.log(\"posts\", resp);\n      self.setState({ posts: resp.data });\n    });\n  }\n\n  renderWordpressHTML(html) {\n    return {__html: html }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar right className=\"green\">\n          <NavItem href=\"#About\">About</NavItem>\n          <NavItem href='#Blog'>Blog</NavItem>\n        </Navbar>\n        <header className=\"App-header\">\n          <h1>{this.state.info.name}</h1>\n          \n          <img src=\"/images/zeke.jpg\" alt=\"Me\" />\n          <p>\n            {this.state.info.description}\n          </p>\n          <p>\n            <a href=\"#\">LinkedIn</a> | <a href=\"#\">Twitter</a> | <a href=\"#\">Github</a>\n          </p>\n        </header>\n        <h1></h1>\n        <Row id=\"About\">\n          <Col m={2}></Col>\n          <Col m={8}>\n            <Card m={6} s={12} title={this.state.pages[0].title.rendered}>\n              <div dangerouslySetInnerHTML={this.renderWordpressHTML(this.state.pages[0].content.rendered)} />\n              \n            </Card>\n          </Col>\n          <Col m={2}></Col>\n        </Row>\n        <h1></h1>\n        <Row id=\"Blog\">\n          {this.state.posts.map(post => {\n            return <Col key={post.id} m={8} className=\"offset-m2\">\n              <h3 dangerouslySetInnerHTML={this.renderWordpressHTML(post.title.rendered)} />\n              <div style={{textAlign: 'left'}} dangerouslySetInnerHTML={this.renderWordpressHTML(post.content.rendered)} />\n              <h1></h1>\n            </Col>\n          })}\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}